(()=>{"use strict";var n={342:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp, .humidity, .clouds, .visibility{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun, .minmax{\n    font-size: 2.5rem;\n}\n.minmax{\n    text-align: center;\n}\n.sunset, .sunrise, .min, .max{\n    margin: 0;\n}\ni{\n    color: #1746A2;\n}\n","",{version:3,sources:["webpack://./src/css/highlights.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,aAAa;IACb,gBAAgB;IAChB,WAAW;AACf;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,qDAAqD;AACzD;AACA;IACI,eAAe;IACf,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,iBAAiB;;AAErB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,SAAS;AACb;AACA;IACI,cAAc;AAClB",sourcesContent:[".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp, .humidity, .clouds, .visibility{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun, .minmax{\n    font-size: 2.5rem;\n}\n.minmax{\n    text-align: center;\n}\n.sunset, .sunrise, .min, .max{\n    margin: 0;\n}\ni{\n    color: #1746A2;\n}\n"],sourceRoot:""}]);const s=o},872:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,".hour{\n    height: 85%;\n    width: 100%;\n    margin: auto;\n    border-radius: 10px;\n    display: flex;\n    justify-content: space-around;\n}\n.single-hour{\n    background-color: #fff;\n    height: 90%;\n    border-radius: 10px;\n    width: 22%;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    text-align: center;\n\n}\nh3{\n    text-align: center;\n}\n.hour-temp{\n margin-top: 0;\n}\n","",{version:3,sources:["webpack://./src/css/hourlyDisplay.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,aAAa;IACb,6BAA6B;AACjC;AACA;IACI,sBAAsB;IACtB,WAAW;IACX,mBAAmB;IACnB,UAAU;IACV,qDAAqD;IACrD,kBAAkB;;AAEtB;AACA;IACI,kBAAkB;AACtB;AACA;CACC,aAAa;AACd",sourcesContent:[".hour{\n    height: 85%;\n    width: 100%;\n    margin: auto;\n    border-radius: 10px;\n    display: flex;\n    justify-content: space-around;\n}\n.single-hour{\n    background-color: #fff;\n    height: 90%;\n    border-radius: 10px;\n    width: 22%;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    text-align: center;\n\n}\nh3{\n    text-align: center;\n}\n.hour-temp{\n margin-top: 0;\n}\n"],sourceRoot:""}]);const s=o},803:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,"main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 75%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 25%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 250px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 6.5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.hourly-container{\n    padding: 0 4%;\n    height: 30%;\n}\n.daily-container{\n    height: 70%;\n    padding: 2% 5%;\n    text-align: center;\n\n}\n","",{version:3,sources:["webpack://./src/css/weatherpage.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,YAAY;IACZ,kCAAkC;AACtC;AACA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;;AAE1B;AACA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,WAAW;;AAEf;AACA;IACI,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,gBAAgB;;AAEpB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,SAAS;AACb;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;;AAEjC;AACA;IACI,aAAa;IACb,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;IACd,kBAAkB;;AAEtB",sourcesContent:["main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 75%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 25%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 250px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 6.5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.hourly-container{\n    padding: 0 4%;\n    height: 30%;\n}\n.daily-container{\n    height: 70%;\n    padding: 2% 5%;\n    text-align: center;\n\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=i(u,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var c=r(n,i),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},364:(n,e,t)=>{async function r(n){console.log(n);try{let e=await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${n}&appid=84be7224f83f2b9047883638524cc4d6`,{mode:"cors"}),t=await e.json();return[t[0].lat,t[0].lon]}catch(n){console.log(n)}}t.r(e),t.d(e,{getCoordinates:()=>r})}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),o=t.n(a),s=t(565),c=t.n(s),l=t(216),d=t.n(l),A=t(589),p=t.n(A),u=t(803),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals,t(364);async function f(){const n=await fetch("https://api.openweathermap.org/data/2.5/forecast?lat=32.715736&lon=-117.161087&exclude=current,minutely,hourly,alerts&units=imperial&appid=84be7224f83f2b9047883638524cc4d6",{mode:"cors"});return(await n.json()).list}var h=t(342),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=o().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),e()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var C=t(872),b={};b.styleTagTransform=p(),b.setAttributes=c(),b.insert=o().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=d(),e()(C.Z,b),C.Z&&C.Z.locals&&C.Z.locals,document.querySelector(".content").appendChild(function(){let n,e=document.createElement("main"),t=document.createElement("section");t.classList.add("left-container"),e.appendChild(t);let r=document.createElement("section");r.classList.add("right-container"),e.appendChild(r);let i=document.createElement("form");i.innerHTML='<input type="text" name="city" id="city" placeholder="Search for places"/>';let a=document.createElement("button");a.innerHTML="<i class='fa-solid fa-magnifying-glass'></i>",i.appendChild(a),t.appendChild(i);let o=document.createElement("div");o.classList.add("left-data-container"),t.appendChild(o);let s=document.createElement("div"),c=document.createElement("h3");c.textContent="Hourly",s.classList.add("hourly-container"),s.appendChild(c),r.appendChild(s);let l=document.createElement("h3");l.textContent="Today's Hightlights";let d=document.createElement("div");return d.classList.add("daily-container"),d.appendChild(l),r.appendChild(d),i.addEventListener("submit",(async n=>{n.preventDefault(),console.log(city.value),console.log("submit"),city.value.replace(/ /g,"+")})),async function(){n=await async function(){const n=await fetch("https://api.openweathermap.org/data/2.5/weather?lat=32.715736&lon=-117.161087&units=imperial&appid=84be7224f83f2b9047883638524cc4d6",{mode:"cors"});console.log(n);let e=await n.json();return console.log(e),e}(),await f(),o.innerHTML=function(n){let e=new Date(1e3*n.dt),t=e.toLocaleDateString("en-us",{year:"numeric",month:"long",day:"numeric"}),r=`${e.getHours()}:${e.getMinutes()}`;return`<img src='https://openweathermap.org/img/wn/${n.weather[0].icon}.png' width='200' height='200'>\n    <h1>${Math.floor(n.main.temp)}°</h1>\n    <div class="zone-container">\n    <p class="date">${t}, </p>\n    <p class="time">${r}</p>\n    </div>\n    <p><i class="fa-solid fa-cloud"></i> Cloud Percentage: ${n.clouds.all}%</p>\n    <p>${n.weather[0].description}</p>\n    <p>${n.name}, CA</p>`}(n),d.appendChild(function(n){const e=document.createElement("div");e.classList.add("grid-container"),["Feels like...","Wind Status","Sunset & Sunrise","Humidity","Visibility","Min & Max"].forEach(((n,t)=>{let r=document.createElement("div");r.classList.add("box",`box${t}`);let i=document.createElement("p");i.classList.add("box-title"),i.textContent=n,r.appendChild(i),e.appendChild(r)}));let t=e.querySelector(".box0"),r=document.createElement("p");r.innerHTML=`<i class="fa-solid fa-temperature-three-quarters"></i>  ${Math.floor(n.main.feels_like)}°`,r.classList.add("temp"),t.appendChild(r);let i=e.querySelector(".box1"),a=document.createElement("p");a.innerHTML=`<i class="fa-solid fa-wind"></i>  ${n.wind.speed} mph`,a.classList.add("wind"),i.appendChild(a);let o=new Date(1e3*n.sys.sunrise),s=`${o.getHours()}:${o.getMinutes()}`,c=new Date(1e3*n.sys.sunset),l=`${c.getHours()}:${c.getMinutes()}`,d=e.querySelector(".box2"),A=document.createElement("p");A.innerHTML=`<i class="fa-solid fa-cloud-sun"></i> ${s} AM`,A.classList.add("sunrise","sun"),d.appendChild(A);let p=document.createElement("p");p.innerHTML=`<i class="fa-solid fa-cloud-moon"></i> ${l} PM`,p.classList.add("sunset","sun"),d.appendChild(p);let u=e.querySelector(".box3"),m=document.createElement("p");m.innerHTML=`<i class="fa-solid fa-droplet"></i> ${n.main.humidity}%`,m.classList.add("humidity"),u.appendChild(m);let f=e.querySelector(".box4"),h=document.createElement("p");h.innerHTML=`<i class="fa-solid fa-eye"></i> ${n.visibility/1e3} mi`,h.classList.add("visibility"),f.appendChild(h);let g=e.querySelector(".box5"),C=document.createElement("p");C.innerHTML=`<i class="fa-solid fa-temperature-arrow-up"></i> ${Math.floor(n.main.temp_min)}°`,C.classList.add("min","minmax"),g.appendChild(C);let b=document.createElement("p");return b.innerHTML=`<i class="fa-solid fa-temperature-arrow-down"></i> ${Math.floor(n.main.temp_max)}°`,b.classList.add("max","minmax"),g.appendChild(b),e}(n)),s.appendChild(function(){let n={},e=document.createElement("div");return e.classList.add("hour"),(async()=>{n=await f(),console.log(n);for(let t=0;t<4;t++){let r=document.createElement("div"),i=new Date(1e3*n[t].dt),a=`${i.getHours()%12}:${i.getMinutes()}0 ${i.getHours()>12?"PM":"AM"}`,o=document.createElement("p");o.innerHTML=a,r.appendChild(o);let s=document.createElement("img");s.src=`https://openweathermap.org/img/wn/${n[t].weather[0].icon}.png`,r.appendChild(s);let c=document.createElement("p");c.innerHTML=`${Math.floor(n[t].main.temp)}°`,c.classList.add("hour-temp"),r.appendChild(c),r.classList.add("single-hour"),e.appendChild(r)}})(),console.log(`this is the data${n}`),console.log([]),e}())}(),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,