(()=>{"use strict";var n={342:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),a=t.n(i),r=t(645),o=t.n(r)()(a());o.push([n.id,".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp, .humidity, .clouds, .visibility{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun, .minmax{\n    font-size: 2.5rem;\n}\n.minmax{\n    text-align: center;\n}\n.sunset, .sunrise, .min, .max{\n    margin: 0;\n}\ni{\n    color: #C1AEFC;\n}\n","",{version:3,sources:["webpack://./src/css/highlights.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,aAAa;IACb,gBAAgB;IAChB,WAAW;AACf;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,qDAAqD;AACzD;AACA;IACI,eAAe;IACf,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,iBAAiB;;AAErB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,SAAS;AACb;AACA;IACI,cAAc;AAClB",sourcesContent:[".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp, .humidity, .clouds, .visibility{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun, .minmax{\n    font-size: 2.5rem;\n}\n.minmax{\n    text-align: center;\n}\n.sunset, .sunrise, .min, .max{\n    margin: 0;\n}\ni{\n    color: #C1AEFC;\n}\n"],sourceRoot:""}]);const s=o},803:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),a=t.n(i),r=t(645),o=t.n(r)()(a());o.push([n.id,"main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 75%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 25%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 300px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.week-container{\n    padding: 1% 4%;\n    height: 30%;\n}\n.daily-container{\n    height: 70%;\n    padding: 2% 5%;\n}\n","",{version:3,sources:["webpack://./src/css/weatherpage.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,YAAY;IACZ,kCAAkC;AACtC;AACA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;;AAE1B;AACA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,WAAW;;AAEf;AACA;IACI,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,gBAAgB;;AAEpB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,SAAS;AACb;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;;AAEjC;AACA;IACI,cAAc;IACd,WAAW;AACf;AACA;IACI,WAAW;IACX,cAAc;AAClB",sourcesContent:["main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 75%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 25%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 300px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.week-container{\n    padding: 1% 4%;\n    height: 30%;\n}\n.daily-container{\n    height: 70%;\n    padding: 2% 5%;\n}\n"],sourceRoot:""}]);const s=o},733:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),a=t.n(i),r=t(645),o=t.n(r)()(a());o.push([n.id,".week{\n    height: 85%;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n","",{version:3,sources:["webpack://./src/css/weeklyDisplay.css"],names:[],mappings:"AAAA;IACI,WAAW;IACX,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;IACnB,qDAAqD;AACzD",sourcesContent:[".week{\n    height: 85%;\n    width: 100%;\n    margin: auto;\n    background-color: #fff;\n    border-radius: 10px;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,a,r){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);i&&o[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(a," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var r={},o=[],s=0;s<n.length;s++){var c=n[s],d=i.base?c[0]+i.base:c[0],l=r[d]||0,A="".concat(d," ").concat(l);r[d]=l+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=a(u,i);i.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var r=i(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<r.length;o++){var s=t(r[o]);e[s].references--}for(var c=i(n,a),d=0;d<r.length;d++){var l=t(r[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}r=c}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,a&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},364:(n,e,t)=>{async function i(n){console.log(n);try{let e=await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${n}&appid=84be7224f83f2b9047883638524cc4d6`,{mode:"cors"}),t=await e.json();return[t[0].lat,t[0].lon]}catch(n){console.log(n)}}t.r(e),t.d(e,{getCoordinates:()=>i})}},e={};function t(i){var a=e[i];if(void 0!==a)return a.exports;var r=e[i]={id:i,exports:{}};return n[i](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0,(()=>{var n=t(379),e=t.n(n),i=t(795),a=t.n(i),r=t(569),o=t.n(r),s=t(565),c=t.n(s),d=t(216),l=t.n(d),A=t(589),p=t.n(A),u=t(803),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals,t(364);var f=t(342),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=o().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=l(),e()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var C=t(733),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=l(),e()(C.Z,h),C.Z&&C.Z.locals&&C.Z.locals,document.querySelector(".content").appendChild(function(){let n,e=document.createElement("main"),t=document.createElement("section");t.classList.add("left-container"),e.appendChild(t);let i=document.createElement("section");i.classList.add("right-container"),e.appendChild(i);let a=document.createElement("form");a.innerHTML='<input type="text" name="city" id="city" placeholder="Search for places"/>';let r=document.createElement("button");r.innerHTML="<i class='fa-solid fa-magnifying-glass'></i>",a.appendChild(r),t.appendChild(a);let o=document.createElement("div");o.classList.add("left-data-container"),t.appendChild(o);let s=document.createElement("div"),c=document.createElement("h3");c.textContent="Week",s.classList.add("week-container"),s.appendChild(c),i.appendChild(s);let d=document.createElement("h3");d.textContent="Today's Hightlights";let l=document.createElement("div");return l.classList.add("daily-container"),l.appendChild(d),i.appendChild(l),a.addEventListener("submit",(async n=>{n.preventDefault(),console.log(city.value),console.log("submit"),city.value.replace(/ /g,"+")})),async function(){n=await async function(){const n=await fetch("https://api.openweathermap.org/data/2.5/weather?lat=32.715736&lon=-117.161087&units=imperial&appid=84be7224f83f2b9047883638524cc4d6",{mode:"cors"});console.log(n);let e=await n.json();return console.log(e),e}(),await async function(){const n=await fetch("https://api.openweathermap.org/data/2.5/forecast?lat=32.715736&lon=-117.161087&units=imperial&appid=84be7224f83f2b9047883638524cc4d6",{mode:"cors"});console.log(n);let e=await n.json();var t;return console.log(e),t=e.list,console.log(t),t.forEach((n=>{let e=new Date(1e3*n.dt).getDate();console.log(e)})),e}(),o.innerHTML=function(n){let e=new Date(1e3*n.dt),t=e.toLocaleDateString("en-us",{year:"numeric",month:"long",day:"numeric"}),i=`${e.getHours()}:${e.getMinutes()}`;return`<img src='https://openweathermap.org/img/wn/${n.weather[0].icon}.png' width='300' height='250'>\n    <h1>${Math.floor(n.main.temp)}°</h1>\n    <div class="zone-container">\n    <p class="date">${t}, </p>\n    <p class="time">${i}</p>\n    </div>\n    <p><i class="fa-solid fa-cloud"></i> Cloud Percentage: ${n.clouds.all}%</p>\n    <p>${n.weather[0].description}</p>\n    <p>${n.name}, CA</p>`}(n),l.appendChild(function(n){const e=document.createElement("div");e.classList.add("grid-container"),["Feels like...","Wind Status","Sunset & Sunrise","Humidity","Visibility","Min & Max"].forEach(((n,t)=>{let i=document.createElement("div");i.classList.add("box",`box${t}`);let a=document.createElement("p");a.classList.add("box-title"),a.textContent=n,i.appendChild(a),e.appendChild(i)}));let t=e.querySelector(".box0"),i=document.createElement("p");i.innerHTML=`<i class="fa-solid fa-temperature-three-quarters"></i>  ${Math.floor(n.main.feels_like)}°`,i.classList.add("temp"),t.appendChild(i);let a=e.querySelector(".box1"),r=document.createElement("p");r.innerHTML=`<i class="fa-solid fa-wind"></i>  ${n.wind.speed} mph`,r.classList.add("wind"),a.appendChild(r);let o=new Date(1e3*n.sys.sunrise),s=`${o.getHours()}:${o.getMinutes()}`,c=new Date(1e3*n.sys.sunset),d=`${c.getHours()}:${c.getMinutes()}`,l=e.querySelector(".box2"),A=document.createElement("p");A.innerHTML=`<i class="fa-solid fa-cloud-sun"></i> ${s} AM`,A.classList.add("sunrise","sun"),l.appendChild(A);let p=document.createElement("p");p.innerHTML=`<i class="fa-solid fa-cloud-moon"></i> ${d} PM`,p.classList.add("sunset","sun"),l.appendChild(p);let u=e.querySelector(".box3"),m=document.createElement("p");m.innerHTML=`<i class="fa-solid fa-droplet"></i> ${n.main.humidity}%`,m.classList.add("humidity"),u.appendChild(m);let f=e.querySelector(".box4"),g=document.createElement("p");g.innerHTML=`<i class="fa-solid fa-eye"></i> ${n.visibility/1e3} mi`,g.classList.add("visibility"),f.appendChild(g);let C=e.querySelector(".box5"),h=document.createElement("p");h.innerHTML=`<i class="fa-solid fa-temperature-arrow-up"></i> ${Math.floor(n.main.temp_min)}°`,h.classList.add("min","minmax"),C.appendChild(h);let b=document.createElement("p");return b.innerHTML=`<i class="fa-solid fa-temperature-arrow-down"></i> ${Math.floor(n.main.temp_max)}°`,b.classList.add("max","minmax"),C.appendChild(b),e}(n)),s.appendChild(function(){let n=document.createElement("div");return n.classList.add("week"),n}())}(),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,