(()=>{"use strict";var n={342:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun{\n    font-size: 2.5rem;\n}\ni{\n    color: #C1AEFC;\n}\n","",{version:3,sources:["webpack://./src/css/highlights.css"],names:[],mappings:"AAAA;IACI,8BAA8B;IAC9B,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,aAAa;IACb,gBAAgB;IAChB,WAAW;AACf;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,qDAAqD;AACzD;AACA;IACI,eAAe;IACf,WAAW;AACf;AACA;IACI,kBAAkB;IAClB,eAAe;AACnB;AACA;IACI,kBAAkB;IAClB,iBAAiB;;AAErB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,cAAc;AAClB",sourcesContent:[".grid-container{\n    /* background-color: bisque; */\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(2, 1fr);\n    row-gap: 20px;\n    column-gap: 30px;\n    height: 80%;\n}\n.box{\n    padding: 10px;\n    border-radius: 10px;\n    background-color: #ffff;\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n}\n.box-title{\n    font-size: 1rem;\n    color: grey;\n}\n.temp{\n    text-align: center;\n    font-size: 3rem;\n}\n.wind{\n    text-align: center;\n    font-size: 2.5rem;\n\n}\n.sun{\n    font-size: 2.5rem;\n}\ni{\n    color: #C1AEFC;\n}\n"],sourceRoot:""}]);const s=a},803:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 70%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 30%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 300px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.week-container{\n    /* background-color: brown; */\n    height: 30%;\n}\n.daily-container{\n    /* background-color:tomato; */\n    height: 70%;\n    padding: 2% 5%;\n}\n","",{version:3,sources:["webpack://./src/css/weatherpage.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,YAAY;IACZ,kCAAkC;AACtC;AACA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;;AAE1B;AACA;IACI,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,WAAW;;AAEf;AACA;IACI,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,gBAAgB;;AAEpB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,eAAe;IACf,SAAS;AACb;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,6BAA6B;AACjC;AACA;IACI,iBAAiB;AACrB;AACA;IACI,iBAAiB;IACjB,YAAY;IACZ,6BAA6B;;AAEjC;AACA;IACI,6BAA6B;IAC7B,WAAW;AACf;AACA;IACI,6BAA6B;IAC7B,WAAW;IACX,cAAc;AAClB",sourcesContent:["main{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    display: flex;\n    height: 100vh;\n    width: 100vw;\n    font-family: 'Poppins', sans-serif;\n}\n.right-container{\n    background-color: #EEEEEE;\n    width: 70%;\n    display: flex;\n    flex-direction: column;\n\n}\n.left-container{\n    box-sizing: border-box;\n    align-items: center;\n    text-align: center;\n    width: 30%;\n    padding: 2%;\n\n}\ninput{\n    box-sizing: border-box;\n    width: 300px;\n    height: 50px;\n    margin-right: 10px;\n    border-radius: 10px;\n    border: none;\n    padding: 0 20px ;\n\n}\ninput::placeholder{\n    font-size: 1.2rem;\n}\nh1{\n    font-size: 5rem;\n    margin: 0;\n}\n.zone-container{\n    display: flex;\n    justify-content: center;\n    border-bottom: 2px solid grey;\n}\np{\n    font-size: 1.5rem;\n}\nbutton{\n    font-size: 1.5rem;\n    border: none;\n    background-color: transparent;\n\n}\n.week-container{\n    /* background-color: brown; */\n    height: 30%;\n}\n.daily-container{\n    /* background-color:tomato; */\n    height: 70%;\n    padding: 2% 5%;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=i[d]||0,A="".concat(d," ").concat(l);i[d]=l+1;var p=t(A),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var c=r(n,o),d=0;d<i.length;d++){var l=t(i[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},87:(n,e,t)=>{async function r(n){console.log(n);try{let e=await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${n}&appid=84be7224f83f2b9047883638524cc4d6`,{mode:"cors"}),t=await e.json();return[t[0].lat,t[0].lon]}catch(n){console.log(n)}}t.r(e),t.d(e,{getCoordinates:()=>r})}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),c=t.n(s),d=t(216),l=t.n(d),A=t(589),p=t.n(A),u=t(803),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals,t(87);var m=t(342),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=a().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=l(),e()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals,t(87),document.querySelector(".content").appendChild(function(){let n,e=document.createElement("main"),t=document.createElement("section");t.classList.add("left-container"),e.appendChild(t);let r=document.createElement("section");r.classList.add("right-container"),e.appendChild(r);let o=document.createElement("form");o.innerHTML='<input type="text" name="city" id="city" placeholder="Search for places"/>';let i=document.createElement("button");i.innerHTML="<i class='fa-solid fa-magnifying-glass'></i>",o.appendChild(i),t.appendChild(o);let a=document.createElement("div");a.classList.add("left-data-container"),t.appendChild(a);let s=document.createElement("div");s.classList.add("week-container"),r.appendChild(s);let c=document.createElement("h3");c.textContent="Today's Hightlights";let d=document.createElement("div");return d.classList.add("daily-container"),d.appendChild(c),r.appendChild(d),o.addEventListener("submit",(async n=>{n.preventDefault(),console.log(city.value),console.log("submit"),city.value.replace(/ /g,"+")})),async function(){n=await async function(){const n=await fetch("https://api.openweathermap.org/data/2.5/weather?lat=32.715736&lon=-117.161087&units=imperial&appid=84be7224f83f2b9047883638524cc4d6",{mode:"cors"});console.log(n);let e=await n.json();return console.log(e),e}(),a.innerHTML=function(n){let e=new Date(1e3*n.dt),t=e.toLocaleDateString("en-us",{year:"numeric",month:"long",day:"numeric"}),r=`${e.getHours()}:${e.getMinutes()}`;return`<img src='https://openweathermap.org/img/wn/${n.weather[0].icon}.png' width='300' height='250'>\n    <h1>${Math.floor(n.main.temp)}°</h1>\n    <div class="zone-container">\n    <p class="date">${t}, </p>\n    <p class="time">${r}</p>\n    </div>\n    <p><i class="fa-solid fa-cloud"></i> Cloud Percentage: ${n.clouds.all}%</p>\n    <p>${n.weather[0].description}</p>\n    <p>${n.name}, CA</p>`}(n),d.appendChild(function(n){const e=document.createElement("div");e.classList.add("grid-container"),["Feels like...","Wind Status","Sunset & Sunrise","Humidity","Visibility","Air Quality"].forEach(((n,t)=>{let r=document.createElement("div");r.classList.add("box",`box${t}`);let o=document.createElement("p");o.classList.add("box-title"),o.textContent=n,r.appendChild(o),e.appendChild(r)}));let t=e.querySelector(".box0"),r=document.createElement("p");r.innerHTML=`<i class="fa-solid fa-cloud-sun"></i>  ${Math.floor(n.main.feels_like)}°`,r.classList.add("temp"),t.appendChild(r);let o=e.querySelector(".box1"),i=document.createElement("p");i.innerHTML=`<i class="fa-solid fa-wind"></i>  ${n.wind.speed} mph`,i.classList.add("wind"),o.appendChild(i);let a=new Date(1e3*n.sys.sunrise),s=`${a.getHours()}:${a.getMinutes()}`,c=e.querySelector(".box2"),d=document.createElement("p");return d.innerHTML=`<i class="fa-solid fa-cloud-sun"></i>     ${s} AM`,d.classList.add("sunrise","sun"),c.appendChild(d),e}(n))}(),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,